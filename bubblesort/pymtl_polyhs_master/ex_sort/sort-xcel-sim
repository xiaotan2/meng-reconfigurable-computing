#!/usr/bin/env python
#=========================================================================
# sort-xcel-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {fl,cl,,rtl}
#  --input <dataset>   {random,sorted-fwd,sorted-rev}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --translate         Translate RTL model to Verilog
#  --dump-vcd          Dump VCD to imul-<impl>-<input>.vcd
#
# Author : Christopher Batten
# Date   : March 16, 2015
#

from __future__ import print_function

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl-python-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import struct

from random            import randint

from pymtl             import *

from SortXcelFL        import SortXcelFL
from SortXcelCL        import SortXcelCL
from SortXcelRTL       import SortXcelRTL
from SortXcelHLS       import SortXcelHLS
from xcel.XcelMsg      import XcelReqMsg, XcelRespMsg

from SortXcelFL_test   import TestHarness
from SortXcelFL_test   import large_data, sort_fwd_data, sort_rev_data

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="fl", choices=["fl","cl","rtl","hls"] )

  p.add_argument( "--input", default="random",
    choices=["random","sorted-fwd","sorted-rev"] )

  p.add_argument( "--trace",     action="store_true" )
  p.add_argument( "--stats",     action="store_true" )
  p.add_argument( "--translate", action="store_true" )
  p.add_argument( "--dump-vcd",  action="store_true" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# make messages
#-------------------------------------------------------------------------

def req( type_, raddr, data ):
  msg = XcelReqMsg()

  if   type_ == 'rd': msg.type_ = XcelReqMsg.TYPE_READ
  elif type_ == 'wr': msg.type_ = XcelReqMsg.TYPE_WRITE

  msg.raddr = raddr
  msg.data  = data
  return msg

def resp( type_, data ):
  msg = XcelRespMsg()

  if   type_ == 'rd': msg.type_ = XcelRespMsg.TYPE_READ
  elif type_ == 'wr': msg.type_ = XcelRespMsg.TYPE_WRITE

  msg.data  = data
  return msg

#-------------------------------------------------------------------------
# Xcel Protocol
#-------------------------------------------------------------------------
# These are the source sink messages we need to configure the accelerator
# and wait for it to finish. We use the same messages in all of our
# tests. The difference between the tests is the data to be sorted in the
# test memory.

def gen_xcel_protocol_msgs( size ):
  return [
    req( 'wr', 1, 0x1000 ), resp( 'wr', 0 ),
    req( 'wr', 2, size   ), resp( 'wr', 0 ),
    req( 'wr', 0, 0      ), resp( 'wr', 0 ),
    req( 'rd', 0, 0      ), resp( 'rd', 1 ),
  ]

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Create the input pattern

  data = None

  if   opts.input == "random":     data = large_data
  elif opts.input == "sorted-fwd": data = sort_fwd_data
  elif opts.input == "sorted-rev": data = sort_rev_data

  ninputs = len(data[::2])

  # Determine which model to use in the simulator

  model_impl_dict = {
    "fl"  : SortXcelFL,
    "cl"  : SortXcelCL,
    "rtl" : SortXcelRTL,
    "hls" : SortXcelHLS
  }

  # Check if translation is valid

  if opts.translate and not opts.impl.startswith("rtl"):
    print("\n ERROR: --translate only works with RTL models \n")
    exit(1)

  # Create VCD filename

  dump_vcd = ""
  if opts.dump_vcd:
    dump_vcd = "sort-xcel-{}-{}.vcd".format( opts.impl, opts.input )

  # Convert test data into byte array

  data_bytes = struct.pack("<{}I".format(len(data)),*data)

  # Protocol messages

  xcel_protocol_msgs = gen_xcel_protocol_msgs( len(data) )
  xreqs  = xcel_protocol_msgs[::2]
  xresps = xcel_protocol_msgs[1::2]

  # Create test harness (we can reuse the harness from unit testing)

  th = TestHarness( model_impl_dict[ opts.impl ](),
                    xreqs, xresps, 0, 0, 0, 0,
                    dump_vcd, opts.translate )

  # Load the data into the test memory

  th.mem.write_mem( 0x1000, data_bytes )

  # Setup the test harness

  th.vcd_file = dump_vcd
  th.elaborate()

  # Create a simulator

  sim = SimulationTool( th )

  # Reset test harness

  sim.reset()

  # Run simulation

  while not th.done():

    if opts.trace:
      sim.print_line_trace()

    sim.cycle()

  # Extra ticks to make VCD easier to read

  sim.cycle()
  sim.cycle()
  sim.cycle()

  # Retrieve data from test memory

  result_bytes = th.mem.read_mem( 0x1000, len(data_bytes) )

  # Convert result bytes into list of ints

  result = list(struct.unpack("<{}I".format(len(data)),buffer(result_bytes)))

  # Compare result to sorted reference

  assert result == sorted(data)

  # Display statistics

  if opts.stats:
    print( "num_cycles = {}".format( sim.ncycles ) )

main()

